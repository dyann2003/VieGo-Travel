// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(ViegoDb1Context))]
    partial class ViegoDb1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Model.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("BookingID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookingId"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("DiscountCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("DiscountCodeID");

                    b.Property<int>("NumAdults")
                        .HasColumnType("integer");

                    b.Property<int?>("NumChildren")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("integer")
                        .HasColumnName("PaymentMethodID");

                    b.Property<string>("PaymentNotes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("SpecialRequests")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TourId")
                        .HasColumnType("integer")
                        .HasColumnName("TourID");

                    b.Property<DateOnly>("TravelEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("TravelStartDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__73951ACDA720ACAE");

                    b.HasIndex("DiscountCodeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "BookingStatus" }, "IX_Bookings_BookingStatus");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Model.Models.DiscountCode", b =>
                {
                    b.Property<int>("DiscountCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiscountCodeID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("DECIMAL(10,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("UsedQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DiscountCodeID");

                    b.ToTable("DiscountCodes");
                });

            modelBuilder.Entity("Model.Models.Itinerary", b =>
                {
                    b.Property<int>("ItineraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ItineraryID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItineraryId"));

                    b.Property<int>("DayNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TourId")
                        .HasColumnType("integer")
                        .HasColumnName("TourID");

                    b.HasKey("ItineraryId")
                        .HasName("PK__Itinerar__361216A6434CD361");

                    b.HasIndex("TourId");

                    b.ToTable("Itineraries");
                });

            modelBuilder.Entity("Model.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PaymentMethodID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PaymentMethodId")
                        .HasName("PK__PaymentM__DC31C1F3DA96D595");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Model.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ReviewID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("BookingID");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ReviewDate")
                        .HasColumnType("date");

                    b.Property<int>("TourId")
                        .HasColumnType("integer")
                        .HasColumnName("TourID");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79AE519CED32");

                    b.HasIndex("BookingId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Model.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE1A8B036B87");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__8A2B61604B73FECF")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Model.Models.ServiceProvider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ProviderID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProviderId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProviderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("ProviderId")
                        .HasName("PK__ServiceP__B54C689D5CD7CFFC");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Email" }, "UQ__ServiceP__A9D105345E1479E4")
                        .IsUnique();

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("Model.Models.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TourID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TourId"));

                    b.Property<string>("DepartureCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Duration")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FeaturedImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("FeaturedImageURL");

                    b.Property<int?>("GroupSizeMax")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupSizeMin")
                        .HasColumnType("integer");

                    b.Property<string>("Policies")
                        .HasColumnType("text");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("ServiceProviderID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TourCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TourType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TourId")
                        .HasName("PK__Tours__604CEA103FD60ACF");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex(new[] { "TourCode" }, "UQ__Tours__1982F8D0366BFBCC")
                        .IsUnique();

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Model.Models.TourAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AssignmentID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssignmentId"));

                    b.Property<DateOnly>("AssignmentDate")
                        .HasColumnType("date");

                    b.Property<int>("GuideId")
                        .HasColumnType("integer")
                        .HasColumnName("GuideID");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TourId")
                        .HasColumnType("integer")
                        .HasColumnName("TourID");

                    b.HasKey("AssignmentId")
                        .HasName("PK__TourAssi__32499E57890AFDC1");

                    b.HasIndex("GuideId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TourId");

                    b.HasIndex(new[] { "Status" }, "IX_TourAssignments_Status");

                    b.ToTable("TourAssignments");
                });

            modelBuilder.Entity("Model.Models.TourAttendee", b =>
                {
                    b.Property<int>("AttendeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AttendeeID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttendeeId"));

                    b.Property<string>("AttendanceStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Absent");

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("BookingID");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("ScheduleID");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("AttendeeId")
                        .HasName("PK__TourAtte__1844012862DF1396");

                    b.HasIndex("BookingId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "AttendanceStatus" }, "IX_TourAttendees_AttendanceStatus");

                    b.ToTable("TourAttendees");
                });

            modelBuilder.Entity("Model.Models.TourExclusion", b =>
                {
                    b.Property<int>("ExclusionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ExclusionID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExclusionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TourId")
                        .HasColumnType("integer")
                        .HasColumnName("TourID");

                    b.HasKey("ExclusionId")
                        .HasName("PK__TourExcl__2703AF95C66C02AC");

                    b.HasIndex("TourId");

                    b.ToTable("TourExclusions");
                });

            modelBuilder.Entity("Model.Models.TourGuide", b =>
                {
                    b.Property<int>("GuideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("GuideID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuideId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("GuideType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("GuideId")
                        .HasName("PK__TourGuid__E77EE03E436CB6D4");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Email" }, "UQ__TourGuid__A9D1053484EADB1F")
                        .IsUnique();

                    b.ToTable("TourGuides");
                });

            modelBuilder.Entity("Model.Models.TourHighlight", b =>
                {
                    b.Property<int>("HighlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("HighlightID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HighlightId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TourId")
                        .HasColumnType("integer")
                        .HasColumnName("TourID");

                    b.HasKey("HighlightId")
                        .HasName("PK__TourHigh__B11CEDD069534D93");

                    b.HasIndex("TourId");

                    b.ToTable("TourHighlights");
                });

            modelBuilder.Entity("Model.Models.TourInclusion", b =>
                {
                    b.Property<int>("InclusionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("InclusionID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InclusionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TourId")
                        .HasColumnType("integer")
                        .HasColumnName("TourID");

                    b.HasKey("InclusionId")
                        .HasName("PK__TourIncl__0486AEBF9957F28C");

                    b.HasIndex("TourId");

                    b.ToTable("TourInclusions");
                });

            modelBuilder.Entity("Model.Models.TourSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ScheduleID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("AvailableSlots")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("MeetingPoint")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateOnly>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TourId")
                        .HasColumnType("integer")
                        .HasColumnName("TourID");

                    b.HasKey("ScheduleId")
                        .HasName("PK__TourSche__9C8A5B690191ADF8");

                    b.HasIndex("TourId");

                    b.HasIndex(new[] { "DepartureDate" }, "IX_TourSchedules_DepartureDate");

                    b.ToTable("TourSchedules");
                });

            modelBuilder.Entity("Model.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACA952F6BB");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534396A980C")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Model.Models.VoucherUsage", b =>
                {
                    b.Property<int>("UsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("UsageID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsageId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("integer")
                        .HasColumnName("BookingID");

                    b.Property<int>("DiscountCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("DiscountCodeID");

                    b.Property<int>("TourId")
                        .HasColumnType("integer")
                        .HasColumnName("TourID");

                    b.Property<DateOnly>("UsageDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("UsageId")
                        .HasName("PK__VoucherU__29B197C03EFF77A3");

                    b.HasIndex("BookingId");

                    b.HasIndex("DiscountCodeId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("VoucherUsage", (string)null);
                });

            modelBuilder.Entity("Model.Models.Booking", b =>
                {
                    b.HasOne("Model.Models.DiscountCode", "DiscountCode")
                        .WithMany()
                        .HasForeignKey("DiscountCodeId");

                    b.HasOne("Model.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK__Bookings__Paymen__628FA481");

                    b.HasOne("Model.Models.TourSchedule", "Schedule")
                        .WithMany("Bookings")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__Schedu__60A75C0F");

                    b.HasOne("Model.Models.Tour", "Tour")
                        .WithMany("Bookings")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__TourID__5FB337D6");

                    b.HasOne("Model.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__UserID__619B8048");

                    b.Navigation("DiscountCode");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Schedule");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Models.Itinerary", b =>
                {
                    b.HasOne("Model.Models.Tour", "Tour")
                        .WithMany("Itineraries")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__Itinerari__TourI__66603565");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Model.Models.Review", b =>
                {
                    b.HasOne("Model.Models.Booking", "Booking")
                        .WithMany("Reviews")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__Booking__74AE54BC");

                    b.HasOne("Model.Models.Tour", "Tour")
                        .WithMany("Reviews")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__TourID__72C60C4A");

                    b.HasOne("Model.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Reviews__UserID__73BA3083");

                    b.Navigation("Booking");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Models.ServiceProvider", b =>
                {
                    b.HasOne("Model.Models.User", "User")
                        .WithMany("ServiceProviders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ServicePr__UserI__440B1D61");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Models.Tour", b =>
                {
                    b.HasOne("Model.Models.ServiceProvider", "ServiceProvider")
                        .WithMany("Tours")
                        .HasForeignKey("ServiceProviderId")
                        .IsRequired()
                        .HasConstraintName("FK__Tours__ServicePr__5629CD9C");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Model.Models.TourAssignment", b =>
                {
                    b.HasOne("Model.Models.TourGuide", "Guide")
                        .WithMany("TourAssignments")
                        .HasForeignKey("GuideId")
                        .IsRequired()
                        .HasConstraintName("FK__TourAssig__Guide__7A672E12");

                    b.HasOne("Model.Models.TourSchedule", "Schedule")
                        .WithMany("TourAssignments")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK__TourAssig__Sched__797309D9");

                    b.HasOne("Model.Models.Tour", "Tour")
                        .WithMany("TourAssignments")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourAssig__TourI__787EE5A0");

                    b.Navigation("Guide");

                    b.Navigation("Schedule");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Model.Models.TourAttendee", b =>
                {
                    b.HasOne("Model.Models.Booking", "Booking")
                        .WithMany("TourAttendees")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__TourAtten__Booki__04E4BC85");

                    b.HasOne("Model.Models.TourSchedule", "Schedule")
                        .WithMany("TourAttendees")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK__TourAtten__Sched__05D8E0BE");

                    b.HasOne("Model.Models.User", "User")
                        .WithMany("TourAttendees")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__TourAtten__UserI__06CD04F7");

                    b.Navigation("Booking");

                    b.Navigation("Schedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Models.TourExclusion", b =>
                {
                    b.HasOne("Model.Models.Tour", "Tour")
                        .WithMany("TourExclusions")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourExclu__TourI__6EF57B66");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Model.Models.TourGuide", b =>
                {
                    b.HasOne("Model.Models.User", "User")
                        .WithMany("TourGuides")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__TourGuide__UserI__4AB81AF0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Models.TourHighlight", b =>
                {
                    b.HasOne("Model.Models.Tour", "Tour")
                        .WithMany("TourHighlights")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourHighl__TourI__693CA210");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Model.Models.TourInclusion", b =>
                {
                    b.HasOne("Model.Models.Tour", "Tour")
                        .WithMany("TourInclusions")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourInclu__TourI__6C190EBB");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Model.Models.TourSchedule", b =>
                {
                    b.HasOne("Model.Models.Tour", "Tour")
                        .WithMany("TourSchedules")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourSched__TourI__59FA5E80");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Model.Models.User", b =>
                {
                    b.HasOne("Model.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Users__RoleId__3E52440B");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Model.Models.VoucherUsage", b =>
                {
                    b.HasOne("Model.Models.Booking", "Booking")
                        .WithMany("VoucherUsages")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__VoucherUs__Booki__7E37BEF6");

                    b.HasOne("Model.Models.DiscountCode", "DiscountCode")
                        .WithMany()
                        .HasForeignKey("DiscountCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Models.Tour", "Tour")
                        .WithMany("VoucherUsages")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__VoucherUs__TourI__00200768");

                    b.HasOne("Model.Models.User", "User")
                        .WithMany("VoucherUsages")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__VoucherUs__UserI__7F2BE32F");

                    b.Navigation("Booking");

                    b.Navigation("DiscountCode");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Models.Booking", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("TourAttendees");

                    b.Navigation("VoucherUsages");
                });

            modelBuilder.Entity("Model.Models.PaymentMethod", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Model.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Model.Models.ServiceProvider", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("Model.Models.Tour", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Itineraries");

                    b.Navigation("Reviews");

                    b.Navigation("TourAssignments");

                    b.Navigation("TourExclusions");

                    b.Navigation("TourHighlights");

                    b.Navigation("TourInclusions");

                    b.Navigation("TourSchedules");

                    b.Navigation("VoucherUsages");
                });

            modelBuilder.Entity("Model.Models.TourGuide", b =>
                {
                    b.Navigation("TourAssignments");
                });

            modelBuilder.Entity("Model.Models.TourSchedule", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TourAssignments");

                    b.Navigation("TourAttendees");
                });

            modelBuilder.Entity("Model.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Reviews");

                    b.Navigation("ServiceProviders");

                    b.Navigation("TourAttendees");

                    b.Navigation("TourGuides");

                    b.Navigation("VoucherUsages");
                });
#pragma warning restore 612, 618
        }
    }
}
